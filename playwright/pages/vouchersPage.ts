import { URL_LIST } from "@data/url";
import { AddVoucherCodeDialog } from "@dialogs/addVoucherCodeDialog";
import type { Page } from "@playwright/test";

import { BasePage } from "./basePage";

export class VouchersPage extends BasePage {
  readonly page: Page;
  readonly addVoucherCodeDialog: AddVoucherCodeDialog;

  constructor(
    page: Page,
    readonly createVoucherButton = page.getByTestId("create-voucher"),
    readonly addCodeButton = page.getByTestId("add-code-button"),
    readonly usageLimitCheckbox = page.getByTestId("has-usage-limit"),
    readonly oncePerCustomerLimitCheckbox = page.getByTestId(
      "apply-once-per-customer",
    ),
    readonly onlyForStaffLimitCheckbox = page.getByTestId("only-for-staff"),
    readonly singleUseLimitCheckbox = page.getByTestId("single-use"),
    readonly usageLimitSection = page.getByTestId("usage-limit-section"),
    readonly usageLimitInput = page.getByTestId("usage-limit").locator("input"),
    readonly saveButton = page.getByTestId("button-bar-confirm"),
    readonly voucherNameInput = page.getByTestId("voucher-name-input"),
    readonly discountValueInput = page.getByTestId("discount-value-input"),
    readonly autoGeneratedCodesItem = page.getByTestId("auto-generate codes"),
    readonly manualGeneratedCodesItem = page.getByTestId("manual"),
    readonly percentDiscountTypeButton = page.getByTestId("VALUE_PERCENTAGE"),
    readonly freeShippingDiscountTypeButton = page.getByTestId("SHIPPING"),
  ) {
    super(page);
    this.page = page;
    this.addVoucherCodeDialog = new AddVoucherCodeDialog(page);
  }

  async typeVoucherName(voucherName = "special voucher automation") {
    await this.voucherNameInput.fill(voucherName);
  }
  async typeUsageLimit(usageLimit = "10000") {
    await this.usageLimitInput.fill(usageLimit);
  }

  async clickCreateVoucherButton() {
    await this.createVoucherButton.click();
  }
  async clickUsageTotalLimitCheckbox() {
    await this.usageLimitCheckbox.click();
  }
  async clickSingleUseLimitCheckbox() {
    await this.singleUseLimitCheckbox.click();
  }
  async clickOnlyForStaffLimitCheckbox() {
    await this.onlyForStaffLimitCheckbox.click();
  }
  async clickOncePerCustomerLimitCheckbox() {
    await this.oncePerCustomerLimitCheckbox.click();
  }
  async clickPercentDiscountTypeButton() {
    await this.percentDiscountTypeButton.click();
  }
  async clickFreeShippingDiscountTypeButton() {
    await this.freeShippingDiscountTypeButton.click();
  }
  async clickSaveButton() {
    await this.saveButton.click();
  }
  async clickAutoGeneratedCodesItem() {
    await this.autoGeneratedCodesItem.click();
  }
  async clickManualGeneratedCodesItem() {
    await this.manualGeneratedCodesItem.click();
  }
  async clickAddCodeButton() {
    await this.addCodeButton.click();
  }

  async gotoVouchersListPage() {
    await this.page.goto(URL_LIST.vouchers);
  }
  async gotoExistingVoucherPage(voucherId: string) {
    await this.page.goto(`${URL_LIST.vouchers}${voucherId}`);
  }
  async gotoVoucherAddPage() {
    await this.page.goto(URL_LIST.vouchersAddPage);
  }

  async typeDiscountValueInChannel(
    channel = "Channel-PLN",
    discountValue = "10",
  ) {
    await this.page
      .getByTestId(channel)
      .locator(this.discountValueInput)
      .fill(discountValue);
  }
}
